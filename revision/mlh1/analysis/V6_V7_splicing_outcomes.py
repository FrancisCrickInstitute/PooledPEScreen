"""
    Project :  Prime editing pilot screens. Revision experiment. Script to determine frequencies of unique amplicons and annotate most prevalent splicing outcomes.
    Date : 241116
    Python version 3.10
"""

# IMPORT

import pandas as pd
import pathlib as pl
import math
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# VARIABLES

INPUT_DIR = pl.Path("/Users/kajbac/Code/241028_splice_variant_validation/V6_V7_qPCR")

OUTPUT_DIR = pl.Path("/Users/kajbac/Code/241028_splice_variant_validation/V6_V7_qPCR")
OUTPUT_DIR.mkdir(exist_ok=True, parents=True)

sample_path_list = [
    INPUT_DIR / "CK1.merged_counts.csv",
    INPUT_DIR / "CK2.merged_counts.csv",
    INPUT_DIR / "CK3.merged_counts.csv",
    INPUT_DIR / "CK4.merged_counts.csv",
    INPUT_DIR / "CK5.merged_counts.csv",
    INPUT_DIR / "CK6.merged_counts.csv",
]

sample_ID = ["CK1", "CK2", "CK3", "CK4", "CK5", "CK6"]

# Skipping events
splicing_outcome_dict = {
    "CATCTTTGGAAATGCTGTTAGTCGAGAACTGATAGAAATTGGATGTGAGGATAAAACCCTAGCCTTCAAAATGAATGGTTACATATCCAATGCAAACTACTCAGTGAAGAAGTGCATCTTCTTACTCTTCATCAACCATCGTCTGGTAGAATCAACTTCCTTGAGAAAAGCCATAGAAACAGTGTATGCAGCCTATTTGCCCAAAAACACACACCCATTCCTGTACCTCAGTTTAGAAATCAGTCCCCAGAATGTGGATGTTAATGTGCACCCCACAAAGCATGAAGTTCACTTCCTGCACGAGGAGAGCATCCTGGAGCGGGTGCAGCAGCACATCGAGAGCAAGCTCCTGGGCTCCAATTCCTCCAGGATGTACTTCACCCAGACTTTGCTACCAGGACTTG": "wt",
    "CATCTTTGGAAATGCTGTTAGTCGTTTAGAAATCAGTCCCCAGAATGTGGATGTTAATGTGCACCCCACAAAGCATGAAGTTCACTTCCTGCACGAGGAGAGCATCCTGGAGCGGGTGCAGCAGCACATCGAGAGCAAGCTCCTGGGCTCCAATTCCTCCAGGATGTACTTCACCCAGACTTTGCTACCAGGACTTG": "x9_10_skip",
    "CATCTTTGGAAATGCTGTTAGTCGAGAACTGATAGAAATTGGATGTGAGGATAAAACCCTAGCCTTCAAAATGAATGGTTACATATCCAATGCAAACTACTCAGTGAAGAAGTGCATCTTCTTACTCTTCATCAACCTTTAGAAATCAGTCCCCAGAATGTGGATGTTAATGTGCACCCCACAAAGCATGAAGTTCACTTCCTGCACGAGGAGAGCATCCTGGAGCGGGTGCAGCAGCACATCGAGAGCAAGCTCCTGGGCTCCAATTCCTCCAGGATGTACTTCACCCAGACTTTGCTACCAGGACTTG": "x10_skip",
    "CATCTTTGGAAATGCTGTTAGTCGAGAACTGATAGAAATTGGATGTGAGGATAAAACCCTAGCCTTCAAAATGAATGGTTACATATCCAATGCAAACTACTCAGTGAAGAAGTGCATCTTCTTACTCTTCATCAACCAAATCAGTCCCCAGAATGTGGATGTTAATGTGCACCCCACAAAGCATGAAGTTCACTTCCTGCACGAGGAGAGCATCCTGGAGCGGGTGCAGCAGCACATCGAGAGCAAGCTCCTGGGCTCCAATTCCTCCAGGATGTACTTCACCCAGACTTTGCTACCAGGACTTG": "x10_skip_alt_acc",
    "CATCTTTGGAAATGCTGTTAGTCGAGAACTGATAGAAATTGGATGTGAGGATAAAACCCTAGCCTTCAAAATGAATGGTTACATATCCAATGCAAACTACTCAGTGAAGAAGTGCATCTTCTTACTCTTCATCAACCACTTTGCTACCAGGACTTG": "x10_11_skip_prim_mism",
    "CATCTTTGGAAATGCTGTTAGTCGAGAACTGATAGAAATTGGATGTGAGGATAAAACCCTAGCCTTCAAAATGAATGGTTACATATCCAATGCAAACTACTCAGTGAAGAAGTGCATCTTCTTACTCTTCATCAACCATCGTCTGGTAGAATCAACTTCCTTGAGAAAAGCCATAGAAACAGTGTATGCAGCCTATTTGCCCAAAAACACACACCCATTCCTGTACCTCAGACTTTGCTACCAGGACTTG": "x11_skip",
    "CATCTTTGGAAATGCTGTTAGTCGATCGTCTGGTAGAATCAACTTCCTTGAGAAAAGCCATAGAAACAGTGTATGCAGCCTATTTGCCCAAAAACACACACCCATTCCTGTACCTCAGACTTTGCTACCAGGACTTG": "x9_x11_skip",
    "CATCTTTGGAAATGCTGTTAGTCGAGAACTGATAGAAATTGGATGTGAGGATAAAACCCTAGCCTTCAAAATGAATGGTTACATATCCAATGCAAACTACTCAGTGAAGAAGTGCATCTTCTTACTCTTCATCAACCATCGTCTGGTAGAATCAACTTCCTTGAGAAAAGCCATAGAAACAGTGTATGCAGCCTATTTGCCCAAAAACACACACCCATTCCTGTACCTCAGAAATCAGTCCCCAGAATGTGGATGTTAATGTGCACCCCACAAAGCATGAAGTTCACTTCCTGCACGAGGAGAGCATCCTGGAGCGGGTGCAGCAGCACATCGAGAGCAAGCTCCTGGGCTCCAATTCCTCCAGGATGTACTTCACCCAGACTTTGCTACCAGGACTTG": "x10_alt_acc",
    "CATCTTTGGAAATGCTGTTAGTCGATCGTCTGGTAGAATCAACTTCCTTGAGAAAAGCCATAGAAACAGTGTATGCAGCCTATTTGCCCAAAAACACACACCCATTCCTGTACCTCAGAGTTTAGAAATCAGTCCCCAGAATGTGGATGTTAATGTGCACCCCACAAAGCATGAAGTTCACTTCCTGCACGAGGAGAGCATCCTGGAGCGGGTGCAGCAGCACATCGAGAGCAAGCTCCTGGGCTCCAATTCCTCCAGGATGTACTTCACCCAGACTTTGCTACCAGGACTTG": "x9_skip_x10_alt_acc_AG_ret",
    "CATCTTTGGAAATGCTGTTAGTCGAGAACTGATAGAAATTGGATGTGAGGATAAAACCCTAGCCTTCAAAATGAATGGTTACATATCCAATGCAAACTACTCAGTGAAGAAGTGCATCTTCTTACTCTTCATCAACCATCGTCTGGTAGAATCAACTTCCTTGAGAAAAGCCATAGAAACAGTGTATGCAGCCTATTTGCCCAAAAACACACACCCATTCCTGTACCTCAGAGTTTAGAAATCAGTCCCCAGAATGTGGATGTTAATGTGCACCCCACAAAGCATGAAGTTCACTTCCTGCACGAGGAGAGCATCCTGGAGCGGGTGCAGCAGCACATCGAGAGCAAGCTCCTGGGCTCCAATTCCTCCAGGATGTACTTCACCCAGACTTTGCTACCAGGACTTG": "x10_x11_itronic_AG_retained",
    "CATCTTTGGAAATGCTGTTAGTCGAGAACTGATAGAAATTGGATGTGAGGATAAAACCCTAGCCTTCAAAATGAATGGTTACATATCCAATGCAAACTACTCAGTGAAGAAGTGCATCTTCTTACTCTTCATCAACCGATATGGGGCAGGACCCCTATGGAATGAGGGTCTTATGACCCACAATCAAATTAGAGTCCTGCCTTGGGCAAGTGAAAGGAAAGCAGGAGAAGACTTTGCTACCAGGACTTG": "x10_x11_skip_intron_11_ret",
    "CATCTTTGGAAATGCTGTTAGTCGATCGTCTGGTAGAATCAACTTCCTTGAGAAAAGCCATAGAAACAGTGTATGCAGCCTATTTGCCCAAAAACACACACCCATTCCTGTACCTCAGTTTAGAAATCAGTCCCCAGAATGTGGATGTTAATGTGCACCCCACAAAGCATGAAGTTCACTTCCTGCACGAGGAGAGCATCCTGGAGCGGGTGCAGCAGCACATCGAGAGCAAGCTCCTGGGCTCCAATTCCTCCAGGATGTACTTCACCCAGACTTTGCTACCAGGACTTG": "x9_skip",
}


# ----------------------------------------------------------------------------------------------------------------------
# MAIN FUNCTION
# ----------------------------------------------------------------------------------------------------------------------
def main():
    """
    Main function to generate a dataframe per sample containing unique sequence counts and annotating frequent splicing events.

    Parameters
    ----------
    :
    :
    """
    save_dir = OUTPUT_DIR
    save_dir.mkdir(exist_ok=True, parents=True)

    for i, path in enumerate(sample_path_list):
        df = pd.read_csv(path, delimiter=",")

        df["percentage_reads"] = df["Count"] / df["Count"].sum()
        # df = df.loc[df["percentage_reads"]>0.01]
        # df["percentage_reads_post_filter"] = df["Count"] / df["Count"].sum()
        df["splicing_outcome"] = df["Sequence"].map(splicing_outcome_dict)
        print(df)

        df.to_csv(
            (
                save_dir / f"data_splicing_outcomes_{sample_ID[i]}_no_filter.csv"
            ).as_posix()
        )


# ----------------------------------------------------------------------------------------------------------------------
if __name__ == "__main__":
    main()
